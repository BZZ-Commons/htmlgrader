name: HTMLHint Lint
concurrency:
  group: 'htmlhint-${{ github.ref }}'
  cancel-in-progress: true
on:
  workflow_call:
    inputs:
      html_glob:
        description: 'Glob pattern for HTML files to lint'
        required: false
        default: '**/*.html'
        type: string
permissions:
  contents: read
  actions: write
  checks: write

jobs:
  run-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      result: ${{ steps.lint.outputs.lint_result }}
      table: ${{ steps.build-table.outputs.table }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - uses: actions/cache@v4
        with:
          path: ~/.npm/_cacache
          key: ${{ runner.os }}-htmlhint-cache
          restore-keys: |
            ${{ runner.os }}-htmlhint-cache

      - name: Install HTMLHint and jq
        run: |
          npm install -g htmlhint
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run HTMLHint and save JSON report
        id: lint
        run: |
          CONFIG_PATH=".github/linters/.htmlhintrc"
          if [ -f "$CONFIG_PATH" ]; then
            htmlhint -c "$CONFIG_PATH" -f json "${{ inputs.html_glob }}" > lint-report.json || true
          else
            htmlhint -f json "${{ inputs.html_glob }}" > lint-report.json || true
          fi
          if jq -e 'map(select(.messages|length>0)) | length > 0' lint-report.json; then
            echo "lint_result=failure" >> $GITHUB_OUTPUT
          else
            echo "lint_result=success" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Build Markdown table of errors
        id: build-table
        run: |
          echo "|Line|Rule|Message|" > feedback.md
          echo "|---|---|---|" >> feedback.md
          jq -r '.[] | .messages[]? | "|\(.line)|\(.rule.id)|\(.message)|"' lint-report.json >> feedback.md
          table=$(sed ':a;N;s/\n/%0A/g;ta' feedback.md)
          echo "table=$table" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: htmlhint-report
          path: lint-report.json

  report-to-moodle:
    needs: run-lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ always() && !contains(github.actor, 'classroom') }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: htmlhint-report

      - name: Update assignment in Moodle
        shell: bash
        run: |
          # 1) Basis-Infos
          user="user_name=${{ github.actor }}"
          repofull="${{ github.repository }}"
          IFS='/' read -r owner reponame <<< "$repofull"
          template="${reponame/"-${{ github.actor }}"/""}"
          assignment="assignment_name=$template"
          token=${{ secrets.MOODLE_TOKEN2 }}

          # 2) Roh-Tabelle mit %0A aus needs.run-lint.outputs.table
          raw_table="${{ needs.run-lint.outputs.table }}"

          # 3) %0A → echte Newlines decodieren
          decoded_table=$(printf '%b' "${raw_table//%0A/\\n}")

          # 4) Punkte & Basis-Feedback bauen
          if [[ "${{ needs.run-lint.outputs.result }}" == "success" ]]; then
            points=2
            feedback="✅ Lint erfolgreich"
          else
            points=1
            feedback="❌ Linter meldet Fehler:\n${decoded_table}"
          fi

          # 5) Header & Link ergänzen
          feedback="## Linting Feedback\n\n${feedback}\n\n---\nLink zum Repository: https://github.com/${{ github.repository }}"

          # 6) Vollständiges Feedback percent-encoden
          escaped_feedback=$(jq -sRr @uri <<<"$feedback")

          # 7) Request an Moodle
          response=$(curl -s -k -X POST \
            "${{ vars.MOODLE_URL }}/webservice/rest/server.php?wstoken=$token&wsfunction=mod_externalassignment_update_grade" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data "$assignment" \
            --data "$user" \
            --data "points=$points" \
            --data "feedback=$escaped_feedback" \
            --data "max=2" \
            --data "externallink=https://github.com/${{ github.repository }}")

          # 8) Status auswerten
          status=$(echo "$response" \
            | sed -n 's#.*<KEY name=\"name\"><VALUE>\(.*\)</VALUE>.*#\1#p' \
            | tr -d '\r\n')
          if [[ "$status" == *success* ]]; then
            echo -e "\033[32m✅ Moodle update successful\033[0m"
          else
            echo -e "\033[31m❌ Moodle API error: '$response'\033[0m" >&2
            exit 1
          fi

  notify-classroom:
    needs: run-lint
    runs-on: ubuntu-latest
    steps:
      - name: Notify Classroom
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eo pipefail
          max_points=2
          total_points=$( [[ "${{ needs.run-lint.outputs.result }}" == 'success' ]] && echo 2 || echo 1 )
          if [[ $max_points -le 0 ]]; then exit 0; fi
          repo="${GITHUB_REPOSITORY}"; run_id="${GITHUB_RUN_ID}"
          owner=${repo%%/*}; name=${repo#*/}
          suite_url=$(gh api "/repos/$owner/$name/actions/runs/$run_id" --jq .check_suite_url)
          suite_id=${suite_url##*/}
          check_id=$(gh api "/repos/$owner/$name/check-suites/$suite_id/check-runs" --jq .check_runs[0].id)
          summary="Points $total_points/$max_points"
          text="{\"totalPoints\":$total_points,\"maxPoints\":$max_points}"
          gh api "/repos/$owner/$name/check-runs/$check_id" --method PATCH \
            -f output[title]='Autograding' \
            -f output[summary]="$summary" \
            -f output[text]="$text" \
            -F output[annotations][][path]=.github \
            -F output[annotations][][start_line]=1 \
            -F output[annotations][][end_line]=1 \
            -F output[annotations][][annotation_level]=notice \
            -F output[annotations][][message]="$summary" \
            -F output[annotations][][title]='Autograding complete'
