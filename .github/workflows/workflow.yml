name: HTMLHint Lint
concurrency:
  group: 'htmlhint-${{ github.ref }}'
  cancel-in-progress: true
on:
  workflow_call:
    inputs:
      html_glob:
        description: 'Glob pattern for HTML files to lint'
        required: false
        default: '**/*.html'
        type: string
permissions:
  contents: read
  actions: write   # for caching and artifact operations
  checks: write    # for reporting status
jobs:
  run-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      result: ${{ steps.lint.outputs.lint_result }}
      table: ${{ steps.build-table.outputs.table }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache npm download-cache
        uses: actions/cache@v4
        with:
          path: ~/.npm/_cacache
          key: ${{ runner.os }}-htmlhint-cache
          restore-keys: |
            ${{ runner.os }}-htmlhint-cache

      - name: Install HTMLHint and jq
        run: |
          npm install -g htmlhint
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run HTMLHint and save JSON report
        id: lint
        run: |
          CONFIG_PATH=".github/linters/.htmlhintrc"
          if [ -f "$CONFIG_PATH" ]; then
            echo "Using custom HTMLHint config at $CONFIG_PATH"
            htmlhint -c "$CONFIG_PATH" -f json "${{ inputs.html_glob }}" > lint-report.json || true
          else
            echo "No custom config found, running default HTMLHint rules"
            htmlhint -f json "${{ inputs.html_glob }}" > lint-report.json || true
          fi
          if jq -e 'map(select(.messages|length>0)) | length > 0' lint-report.json; then
            echo "lint_result=failure" >> $GITHUB_OUTPUT
          else
            echo "lint_result=success" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Build Markdown table of errors
        id: build-table
        run: |
          echo "|Line|Rule|Message|" > feedback.md
          echo "|---|---|---|" >> feedback.md
          # Use rule.id to avoid JSON objects and embedded quotes
          jq -r '.[] | .messages[]? | "|\(.line)|\(.rule.id)|\(.message)|"' lint-report.json >> feedback.md
          # Percent-encode newlines
          table=$(sed ':a;N;s/\n/%0A/g;ta' feedback.md)
          echo "table=$table" >> $GITHUB_OUTPUT

      - name: Upload HTMLHint report
        uses: actions/upload-artifact@v4
        with:
          name: htmlhint-report
          path: lint-report.json

  report-to-moodle:
    needs: run-lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ always() && !contains(github.actor, 'classroom') }}
    steps:
      - name: Download HTMLHint report
        uses: actions/download-artifact@v4
        with:
          name: htmlhint-report

      - name: Update assignment in Moodle
        run: |
          user="user_name=${{ github.actor }}"
          repofull=${{ github.repository }}
          parts=(${repofull//\// })
          reponame=${parts[1]}
          template="${reponame/"-${{ github.actor }}"/""}"
          assignment="assignment_name=$template"
          token=${{secrets.MOODLE_TOKEN2}}

          if [ "${{ needs.run-lint.outputs.result }}" == 'success' ]; then
            points=2
            feedback="Lint erfolgreich"
          else
            points=1
            feedback="Linter meldet Fehler; siehe Tabelle:%0A${{ needs.run-lint.outputs.table }}"
          fi
          echo "$feedback"

          curl -k -X POST "${{ vars.MOODLE_URL }}/webservice/rest/server.php?wstoken=$token&wsfunction=mod_externalassignment_update_grade" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data "$assignment" \
            --data "$user" \
            --data "points=$points" \
            --data "feedback=$feedback" \
            --data "max=2" \
            --data "externallink=${{ github.repository }}"
