
name: HTMLHint Lint
concurrency:
  group: 'htmlhint-${{ github.ref }}'
  cancel-in-progress: true
on:
  workflow_call:
    inputs:
      html_glob:
        description: 'Glob pattern for HTML files to lint'
        required: false
        default: '**/*.html'
        type: string
permissions:
  contents: read
  actions: write   # for caching and artifact operations
  checks: write    # for reporting status
jobs:
  run-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      result: ${{ steps.lint.outputs.lint_result }}
      table: ${{ steps.build-table.outputs.table }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache npm download-cache
        uses: actions/cache@v4
        with:
          path: ~/.npm/_cacache
          key: ${{ runner.os }}-htmlhint-cache
          restore-keys: |
            ${{ runner.os }}-htmlhint-cache

      - name: Install HTMLHint and jq
        run: |
          npm install -g htmlhint
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run HTMLHint and save JSON report
        id: lint
        run: |
          CONFIG_PATH=".github/linters/.htmlhintrc"
          if [ -f "$CONFIG_PATH" ]; then
            echo "Using custom HTMLHint config at $CONFIG_PATH"
            htmlhint -c "$CONFIG_PATH" -f json "${{ inputs.html_glob }}" > lint-report.json || true
          else
            echo "No custom config found, running default HTMLHint rules"
            htmlhint -f json "${{ inputs.html_glob }}" > lint-report.json || true
          fi
          if jq -e 'map(select(.messages|length>0)) | length > 0' lint-report.json; then
            echo "lint_result=failure" >> $GITHUB_OUTPUT
          else
            echo "lint_result=success" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Build simple text list of errors
        id: build-table
        run: |
          # Create simple text format instead of markdown table
          echo "HTMLHint Errors:" > feedback.txt
          jq -r '.[] | .messages[]? | "Line \(.line): \(.message) (Rule: \(.rule.id))"' lint-report.json >> feedback.txt
          # No need to escape < and > anymore - curl --data-urlencode handles it
          table=$(sed ':a;N;s/\n/%0A/g;ta' feedback.txt)
          echo "table=$table" >> $GITHUB_OUTPUT
          echo $table

      - name: Upload HTMLHint report
        uses: actions/upload-artifact@v4
        with:
          name: htmlhint-report
          path: lint-report.json

  report-to-moodle:
    needs: run-lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ always() && !contains(github.actor, 'classroom') }}
    steps:
      - name: Download HTMLHint report
        uses: actions/download-artifact@v4
        with:
          name: htmlhint-report

      - name: Update assignment in Moodle
        run: |
          user="user_name=${{ github.actor }}"
          repofull=${{ github.repository }}
          parts=(${repofull//\// })
          reponame=${parts[1]}
          template="${reponame/"-${{ github.actor }}"/""}"
          assignment="assignment_name=$template"
          token=${{secrets.MOODLE_TOKEN2}}
          if [ "${{ needs.run-lint.outputs.result }}" == 'success' ]; then
            points=2
            feedback="✅ Lint erfolgreich"
          else
            points=1
            feedback="❌ Linter meldet Fehler:%0A%0A${{ needs.run-lint.outputs.table }}"
          fi
          
          # Simple feedback without markdown formatting
          feedback="Linting Feedback:%0A%0A$feedback"
          feedback="$feedback%0A%0ALink zum Repository: https://github.com/${{ github.repository }}"
          
          # Use --data-urlencode like Python's urllib.parse.quote()
          response=$(curl -s -k -X POST "${{ vars.MOODLE_URL }}/webservice/rest/server.php?wstoken=$token&wsfunction=mod_externalassignment_update_grade" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "$assignment" \
            --data-urlencode "$user" \
            --data-urlencode "points=$points" \
            --data-urlencode "feedback=$feedback" \
            --data-urlencode "max=2" \
            --data-urlencode "externallink=${{ github.repository }}")
          
          # Extract the <VALUE> within KEY name="name"
          status=$(echo "$response" \
            | sed -n 's#.*<KEY name="name"><VALUE>\(.*\)</VALUE>.*#\1#p' \
            | tr -d '\r\n')

          if [[ "$status" == *success* ]]; then
            echo -e "\033[32m✅ Moodle update successful\033[0m"
          else
            echo -e "\033[31m❌ Moodle API error: '$response'\033[0m" >&2
            exit 1
          fi
  notify-classroom:
    needs: run-lint
    runs-on: ubuntu-latest
    steps:
      - name: Notify Classroom
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/usr/bin/env bash
          set -eo pipefail
          
          # Collect results from previous jobs
          max_points=0
          total_points=0
          
          max_points=2
          total_points=$( [[ "${{ needs.run-lint.outputs.result }}" == *success* ]] && echo 2 || echo 1 )
          
          if [[ $max_points -le 0 ]]; then
            echo "No points to report, exiting."
            exit 0
          fi
          
          repo="${GITHUB_REPOSITORY}"
          run_id="${GITHUB_RUN_ID}"
          owner=$(echo "$repo" | cut -d'/' -f1)
          name=$(echo "$repo" | cut -d'/' -f2)
          
          # Fetch workflow run to get check_suite_id
          suite_url=$(gh api "/repos/$owner/$name/actions/runs/$run_id" --jq .check_suite_url)
          suite_id=${suite_url##*/}
          
          # Fetch check runs and pick the first
          check_id=$(gh api "/repos/$owner/$name/check-suites/$suite_id/check-runs" --jq .check_runs[0].id)
          
          # Prepare summary
          summary="Points $total_points/$max_points"
          text="{\"totalPoints\":$total_points,\"maxPoints\":$max_points}"
          
          # Update the check run
          response=$(gh api "/repos/$owner/$name/check-runs/$check_id" --method PATCH \
            -f output[title]='Autograding' \
            -f output[summary]="$summary" \
            -f output[text]="$text" \
            -F output[annotations][][path]=.github \
            -F output[annotations][][start_line]=1 \
            -F output[annotations][][end_line]=1 \
            -F output[annotations][][annotation_level]=notice \
            -F output[annotations][][message]="$summary" \
            -F output[annotations][][title]='Autograding complete')
          
          echo -e "\033[32m✅ Classroom notification complete\033[0m"